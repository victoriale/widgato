/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

// Version 0.1.0 globals https://github.com/passit/SNT-Widgets

/**
 * @function constructor
 *
 * @param string name - the element tag that will be the product name
 * @param string html - html Dom converted into a string
 * @param string style - css style converted into a string
 **/
var createWidget = function () {
    function createWidget(name, html, style) {
        _classCallCheck(this, createWidget);

        this.lineClamp = __webpack_require__(2);
        this.fallbackImage = null;
        this.initialData();
        this.name = name;
        this.widgetEl = this.createElementNode(name, html, {
            style: "display:block"
        });
        this.style = this.createElementNode('style', style, {
            id: name + "_style"
        });
    }

    // These 3 functions initial(), get(), save() are all for Session Storage


    _createClass(createWidget, [{
        key: 'initialData',
        value: function initialData() {
            if (sessionStorage.getItem('product') === null) {
                sessionStorage.setItem('product', JSON.stringify({
                    transformData: {}
                }));
            }
        }
    }, {
        key: 'getData',
        value: function getData() {
            return JSON.parse(sessionStorage.getItem('product'));
        }
    }, {
        key: 'saveData',
        value: function saveData(jsonData) {
            sessionStorage.setItem('product', JSON.stringify(jsonData));
        }
    }, {
        key: 'createElementNode',


        /**
         * @function createElementNode
         *
         * @param string type - the element tag that will be the product name
         * @param string innerHTML - html Dom converted into a string
         * @param object attributes - data attributes that are use to populate element tag
         **/
        value: function createElementNode(type, innerHTML, attributes) {
            // create Element for all
            var node = document.createElement(type);
            node.innerHTML = innerHTML;
            try {
                Object.keys(attributes).forEach(function (attr) {
                    node.setAttribute(attr, attributes[attr]);
                });
            } catch (e) {
                return node;
            }
            return node;
        }
    }, {
        key: 'insertStyle',


        /**
         * @function insertStyle
         *
         * @param object widgetEl - dom element style tag that will be inserted into element passed through
         **/
        value: function insertStyle(widgetEl) {
            if (!document.getElementById(this.name + "_style")) {
                widgetEl.appendChild(this.style);
            }
        }
    }, {
        key: 'insertWidget',


        /**
         * @function insertWidget
         *
         * @param object widgetEl - dom element HTML content that will be inserted into element passed through
         **/
        value: function insertWidget(widgetEl) {
            widgetEl.appendChild(this.widgetEl);
        }
    }, {
        key: 'truncateText',


        /**
         * @function truncateText
         * transformes a dom element to be truncated to fit the number of line clamps wanting
         *
         * @param object widgetEl - dom element HTML content that will be inserted into element passed through
         * @param number lineClamp - max number of lines that before getting truncated on the dom element
         * @param string widgetEl - dom element HTML content that will be inserted at the end of the truncated text
         **/
        value: function truncateText(widgetEl) {
            var lineClamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
            var endHtml = arguments[2];

            if (widgetEl && widgetEl.nodeType == 1) {
                var htmlEndEl;
                if (endHtml) {
                    htmlEndEl = this.createElementNode("span", endHtml);
                }
                this.lineClamp.default(widgetEl, {
                    lineCount: lineClamp,
                    endHtml: htmlEndEl
                });
            }
        }
    }, {
        key: 'setImage',


        /**
         * @function setImage
         *
         * @param string image - image string that will be returned
         * @param string fallbackImage - (optional) fallbackImage string that can be used if image is null
         **/
        value: function setImage(image, fallbackImage) {
            if (image != null && image != "null" && image != "") {
                return image;
            } else {
                return fallbackImage ? fallbackImage : this.fallbackImage;
            }
        }
    }, {
        key: 'setDefaultFallbackImage',


        /**
         * @function setDefaultFallbackImage
         *
         * @param string fallbackImage - sets default fallback image if no fallback is provided
         **/
        value: function setDefaultFallbackImage(fallbackImage) {
            this.fallbackImage = fallbackImage;
        }
    }]);

    return createWidget;
}();

module.exports = createWidget;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (ele) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        lineCount = _ref.lineCount,
        ellipsisCharacter = _ref.ellipsisCharacter,
        endHtml = _ref.endHtml;

    // Read the `line-height` of `ele`, and use it to compute the height of
    // `ele` required to fit the given `lineCount`.
    var lineHeight = parseInt(window.getComputedStyle(ele).lineHeight, 10);
    var maximumHeight = lineCount * lineHeight;
    // Exit if text does not overflow the `ele`.
    if (ele.scrollHeight <= maximumHeight) {
        return;
    }

    truncateByWord(ele, maximumHeight);
    truncateByCharacter(ele, maximumHeight, endHtml, ellipsisCharacter || ELLIPSIS);
};

/* The MIT License (MIT)
 * Copyright (c) 2016 Lim Yuan Qing
 * https://github.com/yuanqing/line-clamp
 **/

var ELLIPSIS = '\u2026';
var WHITESPACE_REGEX = /(?=\s)/;
var TRAILING_WHITESPACE_REGEX = /\s+$/;

// Truncate the text of `ele` such that it does not exceed the
// `maximumHeight`. Return `true` if we need to truncate by character, else
// return `false`.
function truncateByWord(ele, maximumHeight) {
    var innerHTML = ele.innerHTML;

    // Split the text of `ele` by whitespace.
    var chunks = innerHTML.split(WHITESPACE_REGEX);

    // The text does not contain whitespace; we need to attempt to truncate
    // by character.
    if (chunks.length === 1) {
        return true;
    }

    // Loop over the chunks, and try to fit more chunks into the `ele`.
    var i = -1;
    var length = chunks.length;
    var newInnerHTML = '';
    while (++i < length) {
        newInnerHTML += chunks[i];
        ele.innerHTML = newInnerHTML;

        // If the new height now exceeds the `maximumHeight` (where it did not
        // in the previous iteration), we know that we are at most one line
        // over the optimal text length.
        if (ele.offsetHeight > maximumHeight) {
            return true;
        }
    }

    return false;
}

// Append `ellipsisCharacter` to `ele`, trimming off trailing characters
// in `ele` such that `ele` will not exceed the `maximumHeight`.
function truncateByCharacter(ele, maximumHeight, endHtml, ellipsisCharacter) {
    var innerHTML = ele.innerHTML;
    var length = innerHTML.length;

    // In each iteration, we trim off one trailing character . Also trim
    // off any trailing punctuation before appending the `ellipsisCharacter`.
    while (length > 0) {
        ele.innerHTML = innerHTML.substring(0, length).replace(TRAILING_WHITESPACE_REGEX, '') + ellipsisCharacter;
        //end ending text exists and add the text into ele to constantly help determine offset height
        if (endHtml) {
            ele.innerHTML += endHtml.outerHTML;
        }

        if (ele.offsetHeight <= maximumHeight) {
            return;
        }
        length--;
    }
}


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(4);


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

(function () {
    // Declare global windows variable to keep track of kbb and it's product
    if (!window.kbbproduct) {
        window.kbbproduct = {};
    }

    if (!window.kbbproduct['dashboard']) {
        window.kbbproduct['dashboard'] = [];
    }

    // set necessary variables
    var protocolToUse = (location.protocol == "https:") ? "https://" : "http://";
    var embedUrl = 'dashboard';
    var currentScript = document.currentScript || (function () {
        var scripts = document.getElementsByTagName('script');
        for (var i = 0; i < scripts.length; i++) {
            if (scripts[i].getAttribute('used') != 'true' && scripts[i].src.indexOf(embedUrl) != -1 && scripts[i].src.indexOf('map') == -1) {
                scripts[i].setAttribute('used', 'true');
                return scripts[i];
            }
        }
    })();

    // declare required files to be compiled into javascript
    var cssFile = __webpack_require__(5);
    var htmlFile = __webpack_require__(6);
    var playBtn = __webpack_require__(7);

    var fallbackImage = protocolToUse + "w1.synapsys.us/widgets/css/public/no_image.jpg";

    // include global class from GLOBALS DIRECTORY
    var createWidget = __webpack_require__(1);

    // Create Dashboard Widget
    var createdDashboard = new createWidget('dashboard', htmlFile, cssFile);
    createdDashboard.fallbackImage = fallbackImage;
    var kbbproduct = createdDashboard.getData();

    //Before inserting widget declare basic of widget number and declare classes
    var dashEl = createdDashboard.widgetEl;
    var dashboardNum = document.getElementsByTagName("dashboard").length;
    dashEl.id = dashboardNum; // Always start at 0
    var dashboardCarousel = dashEl.getElementsByClassName('dw-dash-nav');

    // update key values on dashboard
    Object.keys(dashboardCarousel).forEach(function (value) {
        dashboardCarousel[value].setAttribute('value', dashboardNum);
    });

    // insert widget once basic info of widget has been declared
    createdDashboard.insertStyle(document.head);
    createdDashboard.insertWidget(currentScript.parentNode);


    /**
     * @function dashboard
     * Set up dynamic widget data here
     */
    dashboard = function () {
        var widgetCount = dashEl.id;
        var dashboardScript = currentScript;

        // when creating widget Set default values of current widget dashboard
        var widgetDefaults = {
            widgetNum: widgetCount,
            widget: dashEl,
            widgetData: {},
            retryCount: 0,
            selectedTab: null,
            query: null,
            currentCategory: null,
            apiUrl: null
        };
        // push current widget into array of dashboards to keep each widget seperated
        window.kbbproduct['dashboard'].push(widgetDefaults);
        var dashboardContents = window.kbbproduct['dashboard'][widgetCount];
        dashboardContents.apiUrl = protocolToUse + "dev-article-search.synapsys.us/api/search";


        // set div element to '$' variable
        var $ = function (e) {
            return dashboardContents['widget'].getElementsByClassName(e)[0]
        };

        /**
         * List tab options
         */
        //TODO hard coded
        var tabObj = {
            "trending": {
                display: "Latest News",
                category: "latest"
            },
            "reviews": {
                display: "Expert Reviews",
                category: "review"
            },
            "videos": {
                display: "Videos",
                category: "video"
            },
            "toplists": {
                display: "Top Lists",
                category: "top-10"
            }
        }


        var count = 10;
        var subCategory = "";
        try {
            var srcQuery = dashboardScript.src.split('js?')[1];
            dashboardContents.query = JSON.parse(decodeURIComponent(srcQuery).replace(/'/g, '"'));
            dashboardContents.currentCategory = dashboardContents.query.category;
        } catch (e) {
            // TODO: Default values go here in case of errors
            dashboardContents.currentCategory = "latest";
            dashboardContents.query = {};
        }


        /**
         * @function reset
         * Resets index count to 0 when swapping lists
         */
        function reset() {
            dashboardContents.currentIndex = 0;
            getTabNames();
            httpGetData();
        }


        /**
         * @function getTabNames
         * Set up tab options menu
         */
        function getTabNames() {
            var tabArray = [];
            for (var cat in tabObj) {
                tabArray.push(tabObj[cat].category);
            }
            //generate the tabs
            setTabs(); //TODO comments
            sendTabNames(tabArray);
        }


        /**
         * @function sendTabNames
         * Send dashboard tab name to top level
         *
         * @param array tabs - array of categories that are to be sent as a string seperated by comma
         */
        function sendTabNames(tabs) {
            //convert tab array to string
            var arrString = tabs.join(",");
            top.postMessage("dashboard_category:" + arrString, "*");
        }


        /**
         * @function setTabs
         * Format the tabs' options
         **/
        function setTabs() {
            var tabObjects = Object.keys(tabObj);
            var navSection = $("dashboard-navBarId");
            var navSectionWidth = navSection.offsetWidth;
            var totalTabWidth = 0;

            for (var i = 0; i < tabObjects.length; i++) {
                var cat = tabObjects[i];
                //declare class name and if its the last one add additional class
                var navClassName = i == (tabObjects.length - 1) ? "dashboard-navBar-url dashboard-navBar-last" : "dashboard-navBar-url";

                //get display name and category value for each tab option
                var tabDisplay = tabObj[cat].display;
                var category = tabObj[cat].category;
                var navBarUrl = document.createElement('a');

                navBarUrl.className = navClassName;
                navBarUrl.setAttribute("data-attr", category);
                navBarUrl.setAttribute("value", widgetCount);
                navBarUrl.innerHTML = tabDisplay;

                // default to first tab onload
                if (dashboardContents.currentCategory == category) {
                    dashboardContents.selectedTab = tabObj[cat].displayName;
                    navBarUrl.className += " selected";
                    dashboardContents.currentCategory = tabObj[cat].category;
                }

                //create event listener on clik to run tabSelect function
                navBarUrl.addEventListener('click', tabSelect, false);
                navSection.appendChild(navBarUrl);

                //get width of each tab as they get appended
                var tabWidth = navBarUrl.offsetWidth;
                totalTabWidth += tabWidth;
            } // end for loop

            //generate empty tab for border
            if (navSectionWidth > totalTabWidth) {
                var emptyBarUrl = document.createElement('a');
                emptyBarUrl.className = "dashboard-navBar-empty";
                navSection.appendChild(emptyBarUrl);
            }
        }


        /**
         * @function httpGetData
         * Get data from API
         */
        function httpGetData() {
            // set api category here by using FQDN (apiUrl) + current category selected;
            var apiUrl = encodeURI(dashboardContents.apiUrl + "?article_type=" + dashboardContents.currentCategory + "&publisher=kbb.com&category=automotive&count=10");
            var storage = createdDashboard.getData();
            if (!storage.transformData[apiUrl]) {
                var xHttp;
                if (window.XMLHttpRequest) {
                    xHttp = new XMLHttpRequest
                } else {
                    xHttp = new ActiveXObject('Microsoft.XMLHTTP')
                }
                xHttp.onreadystatechange = function () {
                    if (this.readyState == XMLHttpRequest.DONE) {
                        if (this.status == 200) {
                            transformData(apiUrl, JSON.parse(this.responseText));
                        } else {
                            // Error handling - Get the message
                            var msg = this.statusText;
                            if (this.status == 500) {
                                try {
                                    msg = JSON.parse(this.responseText).message
                                } catch (t) {
                                    console.log('No JSON message')
                                }
                            }
                            msg = 'HTTP Error (' + this.status + '): ' + msg;
                            if (dashboardContents.retryCount++ > 5) {
                                throw msg
                            }
                            setTimeout(reset, 500)
                        }
                    }
                };
                xHttp.open('GET', encodeURI(apiUrl), true);
                xHttp.send();
            } else {
                dashboardContents.widgetData = storage.transformData[apiUrl];
                formatCarData();
                artData()
            }

        } //function httpGetData ends


        /**
         * @function transformData
         * transformed given data to simple necessary text elements
         * stored in sessionStorage cache
         *
         * @param string urlApi - api that was used to get dataArr
         * @param object raw - predefined data the was return from urlApi
         **/
        function transformData(urlApi, raw) {
            var storage = createdDashboard.getData();
            var rawData = raw.hits.hits;
            var transformedData = [];
            rawData.forEach(function (data) {
                var source = data._source;
                transformedData.push({
                    'title': source.title,
                    'teaser': source.raw_article_content,
                    'image': source.primary_image.image_source_url,
                    'url': source.article_url
                });
            });
            storage.transformData[urlApi] = transformedData;
            createdDashboard.saveData(storage);
            dashboardContents.widgetData = transformedData;
            formatCarData();
            artData()
        }


        /**
         * @function formatCarData
         * Format data accordingly to specs before displaying for top articles
         **/
        function formatCarData() {
            if (dashboardContents.widgetData.length == 0) {
                return null;
            }
            var dataList = dashboardContents.widgetData[dashboardContents.currentIndex];
            if (dashboardContents.widgetData.length <= 1) {
                $('next-list-link').classList.add("disabled-button");
            } else {
                $('next-list-link').classList.remove("disabled-button");
            }
            $('playBtn').innerHTML = playBtn;

            $('dw-dash-title').innerHTML = dataList.title;
            createdDashboard.truncateText($('dw-dash-title'), 2);
            var readMore = "<a href='" + dataList.url + "'target=_blank>Read More</a>";

            // determine current title height to increase truncated text to keep text height
            var titleHeight = $('dw-dash-title').offsetHeight;
            var titleLength = parseInt(getComputedStyle($('dw-dash-title'), null).getPropertyValue("line-height"));
            var teaserHeight = Math.round(titleHeight / titleLength) % 2;

            $('teaser').innerHTML = dataList.teaser;
            $('dw-dashUrl').href = dataList.url;
            $('dw-dashTitleUrl').href = dataList.url;

            createdDashboard.truncateText($('teaser'), (4 + teaserHeight), readMore);

            var mainImg = createdDashboard.setImage(dataList.image);

            $('dw-dashImg').setAttribute('src', mainImg);
            $('dw-dashImg').setAttribute('onerror', "this.src='" + createdDashboard.fallbackImage + "'");
        }


        /**
         * @function artData
         * Format data accordingly to specs before displaying for bottom articles
         * Append child element to thumbArt to display the 3 articles in the bottom of dashboard
         **/
        function artData() {
            if (dashboardContents.widgetData.length > 1) {
                shuffleArray(dashboardContents.widgetData);
                var dataArr = dashboardContents.widgetData.length > 3 ? dashboardContents.widgetData.splice(0, 3) : dashboardContents.widgetData;
                // get element id thumbnail and empties out the contents of the parent identifier
                var parent = $("thumbnail");
                parent.innerHTML = "";


                // this is the 3 bottom articles/video thumbnails
                dataArr.forEach(function (val, index) {
                    //set className for new element
                    var thumbItem = document.createElement('div');
                    thumbItem.className = "thumbnails-item";
                    //get image, if no image, then display no-image image
                    var thumbImage = createdDashboard.setImage(val.image);
                    var errorImage = createdDashboard.fallbackImage;
                    thumbItem.innerHTML = '<a href="' + val.url + '" target="_blank"><div class="dashboard-sixteen-nine"><img class="dw-dash-thumb-item" /><div class="play-button small" id=playBtnSm>' + playBtn + '</div></div></a><a href="' + val.url + '" target="_blank"><div class="thumbnails-title">' + val.title + '</div></a>';

                    var itemImage = thumbItem.getElementsByClassName('dw-dash-thumb-item')[0];
                    itemImage.setAttribute('src', thumbImage);
                    itemImage.setAttribute('onerror', "this.src='" + errorImage + "'");

                    // append thumbnail items to thumbnails class
                    parent.appendChild(thumbItem);

                    // add title from item that is now in the dom and truncate text
                    var thumbnailTitle = thumbItem.getElementsByClassName("thumbnails-title")[0];
                    createdDashboard.truncateText(thumbnailTitle, 2);
                });
            }
        }


        /**
         * @function tabSelect
         * Listen to select event and activate tab
         * @param object event - the current target dom element from the onclick event function that was clicked
         **/
        function tabSelect(event) {
            var target = event.target || event.srcElement;

            // make sure select correct dashboard
            dashboardContents = window.kbbproduct['dashboard'][target.getAttribute("value")];

            // set tablinks
            var tablinks = dashboardContents.widget.getElementsByClassName("dashboard-navBar-url");
            for (var i = 0; i < tablinks.length; i++) {
                //remove all selected className found in elements
                tablinks[i].className = tablinks[i].className.replace(" selected", "");
            }
            target.className += " selected";
            dashboardContents.currentCategory = target.getAttribute("data-attr"); //set currentCategory to attr value of selected target
            httpGetData();
        }

        /**
         * @function carData
         * This function goes to the next or previous carousel item by adding dir to
         * the current index. This is usually called via the onClick event on the nav
         * buttons.
         *
         * @param object target - the current dom element from the onclick event function that was clicked
         * @param int dir - This number is added to the index to create the index of
         * the item to be shown.
         */
        function carData(target, dir) {
            // update to new
            dashboardContents = window.kbbproduct['dashboard'][target.getAttribute("value")];

            dashboardContents.currentIndex += dir;

            // set dashboard content index to beginning or end of array index
            dashboardContents.currentIndex = dashboardContents.currentIndex >= dashboardContents.widgetData.length ? 0 : dashboardContents.currentIndex < 0 ? (dashboardContents.widgetData.length - 1) : dashboardContents.currentIndex;
            formatCarData();
        }

        function shuffleArray(a) {
            var j, x, i;
            for (i = a.length - 1; i > 0; i--) {
                j = Math.floor(Math.random() * (i + 1));
                x = a[i];
                a[i] = a[j];
                a[j] = x;
            }
        }

        // NOTE: START HERE
        reset();
        return {
            carousel: carData
        }
    }();
}());


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(0)(false);
// imports


// module
exports.push([module.i, ".line-clamp-wrapper {\r\n  height: 60px;\r\n  overflow: hidden;\r\n}\r\n.line-clamp {\r\n  width: 100px;\r\n  line-height: 20px;\r\n  overflow-wrap: break-word;\r\n  word-wrap: break-word;\r\n}\r\n\r\n.dw-dashboard{\r\n  width: 100%;\r\n  height: auto;\r\n  position: relative;\r\n  margin: 0 auto;\r\n  width: 600px;\r\n  font-family: 'Open Sans', sans-serif;\r\n  -webkit-box-sizing: border-box;\r\n  -moz-box-sizing: border-box;\r\n  box-sizing: border-box;\r\n  text-align: left;\r\n  /*KBB limit*/\r\n}\r\n\r\n.dw-dashboard a {\r\n  outline: 0;\r\n  color: #005baf;\r\n  cursor: pointer;\r\n  text-decoration: none;\r\n}\r\n\r\n.dashboard-sixteen-nine {\r\n  position: relative;\r\n  -webkit-box-flex: 0;\r\n  -webkit-flex: 0 0 100%;\r\n  -ms-flex: 0 0 100%;\r\n  flex: 0 0 100%;\r\n  max-width: 100%;\r\n  overflow: hidden;\r\n}\r\n\r\n.dashboard-sixteen-nine:before {\r\n  display: block;\r\n  content: \"\";\r\n  width: 100%;\r\n  padding-top: 56.25%;\r\n}\r\n\r\n.dashboard-sixteen-nine>img {\r\n  position: absolute;\r\n  top: 50%;\r\n  -webkit-transform: translateY(-50%);\r\n  -ms-transform: translateY(-50%);\r\n  transform: translateY(-50%);\r\n  width: 100%;\r\n}\r\n\r\n.dashboard-navBar {\r\n  align-items: flex-end;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  overflow: hidden;\r\n}\r\n\r\n.dashboard-navBar-empty {\r\n  width: 100%;\r\n  border-bottom: 1px solid #bec8d3;\r\n  cursor: default;\r\n}\r\n\r\n.dashboard-navBar-url {\r\n  position: relative;\r\n  background: #fff;\r\n  /* For browsers that do not support gradients */\r\n  background: -webkit-linear-gradient(#fff, #edf3f9);\r\n  /* For Safari 5.1 to 6.0 */\r\n  background: -o-linear-gradient(#fff, #edf3f9);\r\n  /* For Opera 11.1 to 12.0 */\r\n  background: -moz-linear-gradient(#fff, #edf3f9);\r\n  /* For Firefox 3.6 to 15 */\r\n  background: linear-gradient(#fff, #edf3f9);\r\n  /* Standard syntax */\r\n  border: 1px solid #bec8d3;\r\n  border-left: 0;\r\n  color: #005cb0;\r\n  display: block;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  line-height: 26px;\r\n  height: 30px;\r\n  padding: 0 16px 0 16px;\r\n  white-space: nowrap;\r\n}\r\n\r\n.dashboard-navBar-url:first-child {\r\n  border-top-left-radius: 4px;\r\n  border-left: 1px solid #bec8d3;\r\n}\r\n\r\n.dashboard-navBar-last {\r\n  border-top-right-radius: 4px;\r\n}\r\n\r\n.dashboard-navBar-url.selected {\r\n  background: #fff;\r\n  /* For browsers that do not support gradients */\r\n  background: -webkit-linear-gradient(#fff, #fff);\r\n  /* For Safari 5.1 to 6.0 */\r\n  background: -o-linear-gradient(#fff, #fff);\r\n  /* For Opera 11.1 to 12.0 */\r\n  background: -moz-linear-gradient(#fff, #fff);\r\n  /* For Firefox 3.6 to 15 */\r\n  background: linear-gradient(#fff, #fff);\r\n  /* Standard syntax */\r\n  border-bottom: 0;\r\n  color: #333;\r\n  border-top-left-radius: 4px;\r\n  border-top-right-radius: 4px;\r\n  height: 40px;\r\n  line-height: 36px;\r\n}\r\n\r\n.dashboard-navBar-url.selected:after {\r\n  content: \"\";\r\n  position: absolute;\r\n  top: 2px;\r\n  left: 0;\r\n  height: 36px;\r\n  border-left: 1px solid #bec8d3;\r\n  margin-left: -1px;\r\n}\r\n\r\n.dashboard-navBar-url.selected:hover {\r\n  cursor: default;\r\n  text-decoration: none;\r\n}\r\n\r\n/*.dashboard-navBar-item{\r\n  display: inline-block;\r\n}*/\r\n\r\n.dw-dash {\r\n  background-color: #fff;\r\n}\r\n\r\n.dw-dash-content {\r\n  display: flex;\r\n  padding-top: 20px;\r\n}\r\n\r\n.dw-dash-art {\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 300px;\r\n}\r\n\r\n.dw-dash-thumb {\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 100%;\r\n}\r\n\r\n.dw-dash-car {\r\n  -webkit-flex: 0 0 83.33333%;\r\n  -ms-flex: 0 0 83.33333%;\r\n  flex: 0 0 83.33333%;\r\n  max-width: 83.33333%;\r\n}\r\n\r\n.dw-dash-nav {\r\n  color: #005baf;\r\n  font-size: 24px;\r\n  text-align: center;\r\n  width: 100%;\r\n  display: inline-block;\r\n}\r\n\r\n.dw-dash-details {\r\n  display:block;\r\n  width:100%;\r\n}\r\n\r\n.dw-dash-title {\r\n  color: #333;\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n  line-height: 22px;\r\n  margin: 8px 25px;\r\n  overflow: hidden;\r\n}\r\n\r\n.dw-dash-teaser {\r\n  color: #333;\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  line-height: 22px;\r\n  margin: 0 25px 20px;\r\n}\r\n\r\n.dw-dash-car {\r\n  -webkit-flex: 0 0 83.33333%;\r\n  -ms-flex: 0 0 83.33333%;\r\n  flex: 0 0 83.33333%;\r\n  max-width: 83.33333%;\r\n}\r\n\r\n.dw-dash-ad {\r\n  align-items: flex-end;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: auto;\r\n}\r\n\r\n.dw-dash-ad-txt {\r\n  color: #ccc;\r\n  font-size: 10px;\r\n  padding: 5px 10px 0 0;\r\n}\r\n\r\n.adSpot {\r\n  background: #d3d3d3;\r\n  width: 300px;\r\n  height: 250px;\r\n}\r\n\r\n.thumbnails {\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  padding: 0 15px 0 15px;\r\n}\r\n\r\n.thumbnails-item {\r\n  width: calc(1/3*100% - (1 - 1/3)*15px);\r\n}\r\n\r\n.thumbnails-title {\r\n  color: #005cb0;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  line-height: 22px;\r\n  margin-bottom: 14px;\r\n}\r\n\r\n.play-button {\r\n  align-items: center;\r\n  background: rgba(255, 255, 255, .7);\r\n  border-radius: 50%;\r\n  box-sizing: border-box;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  justify-content: center;\r\n  position: absolute;\r\n  z-index: 10;\r\n}\r\n\r\n.play-button.large {\r\n  bottom: 40px;\r\n  font-size: 32px;\r\n  height: 60px;\r\n  left: 95px;\r\n  padding: 4px;\r\n  width: 60px;\r\n}\r\n\r\n.play-button.large svg {\r\n  width: 60px;\r\n}\r\n\r\n.play-button.small {\r\n  bottom: 10px;\r\n  font-size: 20px;\r\n  height: 28px;\r\n  left: 5px;\r\n  padding: 4px;\r\n  width: 28px;\r\n}\r\n\r\n.play-button.small svg {\r\n  width: 28px;\r\n}\r\n", ""]);

// exports


/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = "<div class=dw-dashboard>\r\n  <div class=\"dashboard-navBar dashboard-navBarId\">\r\n    <!-- Append menu options here in js file in funtion getTab() -->\r\n  </div>\r\n  <div class=dw-dash>\r\n    <div class=dw-dash-content>\r\n      <!-- body widget, article and ads here  -->\r\n      <div class=dw-dash-art>\r\n        <div class=dw-dash-thumb>\r\n          <!-- Previous Button -->\r\n          <a target=self class=\"dw-dash-nav prev-list-link\" onclick=dashboard.carousel(this,-1) value=\"\"><i class=\"fa fa-chevron-left\"></i></a>\r\n          <div class=dw-dash-car>\r\n            <a class=\"dw-dashUrl dw\" href=\"\" target=_blank>\r\n              <div class=dashboard-sixteen-nine>\r\n                <img class=dw-dashImg src=xxxHTMLLINKxxx0.0162770619981673640.09278511525686639xxx onerror=\"this.src=&quot;//w1.synapsys.us/widgets/css/public/no_image.jpg&quot;\" class=dw-dash-thumb-item />\r\n                <div class=\"play-button large playBtn\">\r\n                  <!-- Insert play button svg here -->\r\n                </div>\r\n              </div>\r\n            </a>\r\n          </div>\r\n          <!-- Next Button -->\r\n          <a target=self class=\"dw-dash-nav next-list-link\" onclick=dashboard.carousel(this,1) value=\"\"><i class=\"fa fa-chevron-right\"></i></a>\r\n        </div>\r\n        <div class=dw-dash-details>\r\n          <a class=dw-dashTitleUrl href=\"\" target=_blank>\r\n            <div class=\"dw-dash-title dw-dashTitle\"></div>\r\n          </a>\r\n          <div class=\"dw-dash-teaser teaser\"></div>\r\n        </div>\r\n      </div>\r\n      <div class=dw-dash-ad>\r\n        <!-- Ad Goes Here  -->\r\n        <div class=adSpot></div>\r\n        <div class=dw-dash-ad-txt>Advertisement</div>\r\n      </div>\r\n    </div>\r\n    <div class=\"thumbnails thumbnail\">\r\n      <!-- Insert thumbnail items here in js file -->\r\n    </div>\r\n  </div>\r\n</div>\r\n";

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 486 486\"><title>Asset 2</title><g id=\"Layer_2\" data-name=\"Layer 2\"><g id=\"Layer_1-2\" data-name=\"Layer 1\"><path d=\"M243,486C109,486,0,377,0,243S109,0,243,0,486,109,486,243,377,486,243,486Zm0-462.1C122.19,23.9,23.9,122.19,23.9,243S122.19,462.1,243,462.1,462.1,363.81,462.1,243,363.81,23.9,243,23.9Z\"></path><path d=\"M359.46,235.13,197.32,104.66a8.65,8.65,0,0,0-14.07,6.74V372.33a8.65,8.65,0,0,0,14.07,6.74L359.46,248.6A8.65,8.65,0,0,0,359.46,235.13Z\"></path></g></g></svg>"

/***/ })
/******/ ]);
//# sourceMappingURL=dashboard.min.js.map